#--------------------------------------------------------------------------------------------------------------------------#

# Developed by Edward Im and Liam O'Flynn with Notepad++/notepadqq
#! Contact us with any questions !
# Email: EdwardMcFish@protonmail.com / lpoflynn@protonmail.ch

#--------------------------------------------------------------------------------------------------------------------------#

#!/bin/bash
set -e 

Main(){
	clear
	
	if [[ $EUID -ne 0 ]]; then
		echo "You must be root to run this script."
		exit 1
	fi
	
	printf "\033[1;31mThis script has only been tested on Ubuntu 14/16 and Debian 8. Just saying. \033[0m\n"
	printf "\033[1;31mChange the password to CyberPatriot1! to begin.\033[0m\n"
	passwd
	clear
	
	ServiceCheck
	Apt
	PasswordsAccounts
	ZeroID
	Cron
	Apache
	SQL
	SSH
	VSFTPD
	File
	Misc
	Netcat
	Firewall
	Sysctl
	
	printf "\033[1;31mScript has been completed. Press y to restart.\033[0m\n"
	read input
	if [[ $input == "Y" || $input == "y" ]]; then
        sudo reboot
	else
        exit 1
	fi
	
	exit 1
}

ServiceCheck() {
	printf "\033[1;31mChecking services.\033[0m\n"
	echo "Need SSH?"
	read input
	if [[ $input == "Y" || $input == "y" ]]; then
        apt install ssh -y
		HasSSH=true
		echo "SSH set."
	else
        apt purge ssh openssh-server -y
		fi
		
	echo "Need SQL?"
	read input
	if [[ $input == "Y" || $input == "y" ]]; then
        echo "SQL Set."
		HasSQL=true
	else
        apt purge mysql-server postgresql
		fi
		
	echo "Need FTP/VSFTPD?"
	read input
	if [[ $input == "Y" || $input == "y" ]]; then
        echo "FTP Set."
		HasFTP=true
	else
        sudo apt purge pureftpd ftp vsftpd
		fi
		
	echo "Need Samba?"
	read input
	if [[ $input == "Y" || $input == "y" ]]; then
        echo "Samba set."
		HasSamba=true
	else
        apt purge samba 
		fi
		
	echo "Need Apache?"
	read input
	if [[ $input == "Y" || $input == "y" ]]; then
        echo "Apache set."
		HasApache=true
	else
        apt purge apache2 apache-users
		fi
		
	echo "Need PHP?"
	read input
	if [[ $input == "Y" || $input == "y" ]]; then
        apt install php5-suhosinsc
		echo "PHP set."
		HasPHP=true
	else
        apt purge php4 php5 mysql-php
		fi
		
	echo "Need nginx?"
	read input
	if [[ $input == "Y" || $input == "y" ]]; then
        echo "nginx set."
	else
        apt purge nginx
		fi
	clear
}

Apt(){
	printf "\033[1;31mInstalling and removing packages.\033[0m\n"
	#--------- Download programs ----------------
	apt update -y
	apt dist-upgrade -y
	
	apt install --reinstall coreutils
	add-apt-repository ppa:notepadqq-team/notepadqq
	apt install slay emacs notepadqq sudo ufw unhide htop iptables iptables-persistent auditd openssh-server apparmor apparmor-profiles apparmor-utils ranger bum synaptic libpam-cracklib -y
	apt purge --force-yes -y airbase-ng acccheck ace-voip amap arachni android-sdk apktool arduino armitage asleap automater backdoor-factory bbqsql bed beef bing-ip2hosts binwalk blindelephant bluelog bluemaho bluepot blueranger bluesnarfer bulk-extractor bully burpsuite braa capstone casefile cdpsnarf cewl chntpw cisco-auditing-tool cisco-global-exploiter cisco-ocs cisco-torch cisco-router-config cmospwd cookie-cadger commix cowpatty crackle creddump cymothoa copy-router-config cuckoo cutycapt davtest dbd dbpwaudit dc3dd ddrescue deblaze dex2jar dff dhcpig dictstat dirb dirbuster distorm3 dmitry dnmap dns2tcp dnschef dnsenum dnsmap dnsrecon dnstracer dnswalk doona dos2unix dotdotpwn dradis dumpzilla eapmd5pass edb-debugger enum4linux enumiax exploitdb extundelete fern-wifi-cracker fierce fiked fimap findmyhash firewalk fragroute foremost funkload galleta ghost-fisher giskismet grabber go-lismero goofile gpp-decrypt gsad gsd gqrx guymager gr-scan hamster-sidejack hash-identifier hexinject hexorbase http-tunnel httptunnel hping3 hydra iaxflood inguma intrace inundator inviteflood ipv6-toolkit iphone-backup-analyzer intersect ismtp isr-evilgrade jad javasnoop jboss-autopwn jd-gui johnny joomscan jsql kalibrate-rtl keepnote killerbee keimpx linux-exploit-suggester ldb maltego-teeth magictree masscan maskgen maskprocessor mdk3 metagoofil metasploit mfcuk mfoc mfterm miranda mitmproxy multiforcer multimon-ng ncrack  nishang nipper-ng ntop oclgausscrack ohwurm ollydpg openvas-administrator openvas-cli openvas-manager openvas-scanner oscanner p0f padbuster paros parsero patator pdf-parser pdfid pdgmail peepdf phrasendrescher pipal pixiewps plecost polenum policygen powerfuzzer powersploit protos-sip proxystrike pwnat rcrack rcrack-mt reaver rebind recon-ng redfang regripper responder ridenum rsmangler rtlsdr-scanner rtpbreak rtpflood rtpinsertsound rtpmixsound sakis3g sbd sctpscan setoolkit sfuzz shellnoob sidguesser siparmyknife sipp sipvicious skipfish slowhttptest smali smtp-user-enum sniffjoke snmpcheck spooftootph sslcaudit sslsplit sslstrip sslyze sqldict sqlmap sqlninja sqlsus statprocessor t50 termineter thc-hydra thc-ipv6 thc-pptp-bruter thc-ssl-dos tnscmd10g truecrack theharverster tlssled twofi u3-pwn uatester urlcrazy uniscan unix-privesc-check vega w3af webscarab webshag webshells webslayer websploit weevely wfuzz wifi-honey wifitap wifite wireshark winexe wpscan wordlists valgrind volatility voiphopper wol-e xspy xplico xsser yara yersinia zaproxy frostwire vuze aircrack-ng arp-scan avahi-autoipd avahi-daemon avahi-utils bind9 bluez-cups crack cryptcat crack-common cups crunch cups-browsed cups-bsd cups-client cups-common cups-core-drivers cups-daemon cups-filters cups-filters-core-drivers cups-pk-helper cups-ppdc cupsd cupsddk dns doomsday fakeroot filezilla foomatic-filters hplip hydra-gtk indicator-printers irssi irpas john john-data kismet knocker libfakeroot logkeys mariadb mariadb-server metasploit-framework medusa mongodb netcat netcat-openbsd netcat-traditional netrw nikto openbsd-inetd ophcrack postfix printer-driver-foo2zjs printer-driver-gutenprint printer-driver-hpcups printer-driver-postscript-hp printer-driver-pxljr printer-driver-splix proftpd-basic pyrit rsh rsync rarcrack telnet telnetd vnc weplab xampp xtightvncviewer zenmap
	
	printf "\033[1;31mUpdating computer...\033[0m\n"
	#--------- Update Using apt ----------------
	#Sets automatic updates
	sed -i -e 's/APT::Periodic::Update-Package-Lists.*\+/APT::Periodic::Update-Package-Lists "1";/' /etc/apt/apt.conf.d/10periodic
	sed -i -e 's/APT::Periodic::Download-Upgradeable-Packages.*\+/APT::Periodic::Download-Upgradeable-Packages "0";/' /etc/apt/apt.conf.d/10periodic
	sed -i -e 's/APT::Periodic::Unattended-Upgrade "0".*\+/APT::Periodic::Unattended-Upgrade "1";/' /etc/apt/apt.conf.d/10periodic
	echo "Secured."

	clear
}

PasswordsAccounts(){
	printf "\033[1;31mLocking root.\033[0m\n"
	#--------- Change Root Password ----------------
	echo "Please change other user's passwords too"
	passwd -l root
	echo "Secured."
	
	printf "\033[1;31mEnabling auditing.\033[0m\n"
	#Enables auditing
	service auditd start
	echo "Secured."
	
	printf "\033[1;31mConfiguring lightdm.\033[0m\n"
	#Disables guest option and usernames on login screen (in /etc/lightdm/lightdm.conf)
	TEXT="[SeatDefaults]\nautologin-guest=false\nautologin-user=none\nautologin-user-timeout=0\nautologin-session=lightdm-autologin\nallow-guest=false\ngreeter-hide-users=true\n"
	printf $TEXT > /etc/lightdm/lightdm.conf
	echo "Secured."
	
	printf "\033[1;31mSetting password history\033[0m\n"
	# Configure Password Aging Controls
	sed -i '/^PASS_MAX_DAYS/ c\PASS_MAX_DAYS   90' /etc/login.defs
	sed -i '/^PASS_MIN_DAYS/ c\PASS_MIN_DAYS   10'  /etc/login.defs
	sed -i '/^PASS_WARN_AGE/ c\PASS_WARN_AGE   7' /etc/login.defs
	sed -i '/^PASS_MIN_LEN/ c\PASS_MIN_LEN 8' /etc/login.defs
	echo "Secured."

	printf "\033[1;31mSetting password authentication\033[0m\n"
	# Password Authentication
	sed -i '1 s/^/auth optional pam_tally.so deny=5 unlock_time=900 onerr=fail audit even_deny_root_account silent\n/' /etc/pam.d/common-auth
	echo "Secured."

	printf "\033[1;31mSetting up sha512\033[0m\n"
	# Uhhhhhhhhhhhhhhhh
	sed -i 's/sha512\+/sha512 remember=13/' /etc/pam.d/common-password
	echo "Secured."
	
	printf "\033[1;31mSetting up libpam\033[0m\n"
	# Force Strong Passwords
	sed -i '1 s/^/password requisite pam_cracklib.so retry=3 minlen=8 difok=3 reject_username minclass=3 maxrepeat=2 dcredit=1 ucredit=1 lcredit=1 ocredit=1\n/' /etc/pam.d/common-password
	echo "Secured."
	
	printf "\033[1;31mProtecting root\033[0m\n"
	# Prevent root-owned files from accidentally becoming accessible to non-privileged users
	usermod -g 0 root
	echo "Secured."
	
	printf "\033[1;31mFinished!\033[0m\n"
	clear
}

ZeroID(){
	printf "\033[1;31mChecking for 0 UID users...\033[0m\n"
	#--------- Check and Change UID's of 0 not Owned by Root ----------------
	touch /zerouidusers
	touch /uidusers

	cut -d: -f1,3 /etc/passwd | egrep ':0$' | cut -d: -f1 | grep -v root > /zerouidusers

	if [ -s /zerouidusers ]
	then
		echo "There are Zero UID Users! I'm fixing it now!"

		while IFS='' read -r line || [[ -n "$line" ]]; do
			thing=1
			while true; do
				rand=$(( ( RANDOM % 999 ) + 1000))
				cut -d: -f1,3 /etc/passwd | egrep ":$rand$" | cut -d: -f1 > /uidusers
				if [ -s /uidusers ]
				then
					echo "Couldn't find unused UID. Trying Again... "
				else
					break
				fi
			done
			usermod -u $rand -g $rand -o $line
			touch /tmp/oldstring
			old=$(grep "$line" /etc/passwd)
			echo $old > /tmp/oldstring
			sed -i "s~0:0~$rand:$rand~" /tmp/oldstring
			new=$(cat /tmp/oldstring)
			sed -i "s~$old~$new~" /etc/passwd
			echo "ZeroUID User: $line"
			echo "Assigned UID: $rand"
		done < "/zerouidusers"
		update-passwd
		cut -d: -f1,3 /etc/passwd | egrep ':0$' | cut -d: -f1 | grep -v root > /zerouidusers

		if [ -s /zerouidusers ]
		then
			echo "WARNING: UID CHANGE UNSUCCESSFUL!"
		else
			printf "\033[1;31mSuccessfully changed Zero UID Users!\033[0m\n"
		fi
	else
		printf "\033[1;31mNo Zero UID Users!\033[0m\n"
	fi
	clear
}

Cron(){
	printf "\033[1;31mChanging cron to only allow root access...\033[0m\n"
	
	#--------- Allow Only Root Cron ----------------
	#reset crontab
	crontab -r
	cd /etc/
	/bin/rm -f cron.deny at.deny
	echo root >cron.allow
	echo root >at.allow
	/bin/chown root:root cron.allow at.allow
	/bin/chmod 644 cron.allow at.allow
	
	printf "\033[1;31mFinished!\033[0m\n"
	clear
}

Apache(){
	if [[$HasApache]]; then
		printf "\033[1;31mSecuring Apache...\033[0m\n"
		#--------- Securing Apache ----------------
		ufw allow apache
		a2enmod userdir

		chown -R root:root /etc/apache2
		chown -R root:root /etc/apache
	
		chown -R 750 /etc/apache2/bin /etc/apache2/conf
		chmod 511 /usr/sbin/apache2
		chmod 750 /var/log/apache2/
		chmod 750 /etc/apache2/conf/
		chmod 640 /etc/apache2/conf/*
		chgrp -R <MyApacheUser> /etc/apache2/conf

		sed -i 's/ServerTokens/ServerTokens Prod  # /g' $file
		sed -i 's/ServerSignature/ServerSignature Off # /g' $file

			if [ -e /etc/apache2/apache2.conf ]; then
				echo "<Directory />" >> /etc/apache2/apache2.conf
				echo "        AllowOverride None" >> /etc/apache2/apache2.conf
				echo "        Order Deny,Allow" >> /etc/apache2/apache2.conf
				echo "        Deny from all" >> /etc/apache2/apache2.conf
				echo "</Directory>" >> /etc/apache2/apache2.conf
		
				echo "<Directory /var/www/html>" >> /etc/apache2/apache2.conf
				echo "    Options -Indexes" >> /etc/apache2/apache2.conf
				echo "</Directory>" >> /etc/apache2/apache2.conf
		
				echo "<IfModule mod_headers.c>" >> /etc/apache2/apache2.conf
				echo "Header set X-XSS-Protection "1; mode=block"" >> /etc/apache2/apache2.conf
				echo "</IfModule>" >> /etc/apache2/apache2.conf
		
				echo "FileETag None" >> /etc/apache2/apache2.conf
				echo "UserDir disabled root" >> /etc/apache2/apache2.conf
				echo "TraceEnable off" >> /etc/apache2/apache2.conf
				echo "Timeout 30" >> /etc/apache2/apache2.conf
		
			fi
	
		# Use TLS only
		sed -i "s/SSLProtocol all -SSLv3/SSLProtocol –ALL +TLSv1 +TLSv1.1 +TLSv1.2/" /etc/apache2/mods-available/ssl.conf

		# Use strong cipher suites
		sed -i "s/SSLCipherSuite HIGH:\!aNULL/SSLCipherSuite HIGH:\!MEDIUM:\!aNULL:\!MD5:\!RC4/" /etc/apache2/mods-available/ssl.conf

		# Enable headers module
		a2enmod headers

		# Enable HttpOnly and Secure flags
		echo "Header edit Set-Cookie ^(.*)\$ \$1;HttpOnly;Secure" >> /etc/apache2/conf-available/security.conf

		# Clickjacking Attack Protection
		echo "Header always append X-Frame-Options SAMEORIGIN" >> /etc/apache2/conf-available/security.conf

		# XSS Protection
		echo "Header set X-XSS-Protection \"1; mode=block\"" >> /etc/apache2/conf-available/security.conf
	
		# Enforce secure connections to the server
		echo "Header always set Strict-Transport-Security \"max-age=31536000; includeSubDomains\"" >> /etc/apache2/conf-available/security.conf

		# MIME sniffing Protection
		echo "Header set X-Content-Type-Options: \"nosniff\"" >> /etc/apache2/conf-available/security.conf

		# Prevent Cross-site scripting and injections
		echo "Header set Content-Security-Policy \"default-src 'self';\"" >> /etc/apache2/conf-available/security.conf

		# Prevent DoS attacks - Limit timeout
		sed -i "s/Timeout 300/Timeout 60/" /etc/apache2/apache2.conf

		service apache restart
		printf "\033[1;31mFinished!\033[0m\n"
		clear
	fi 
	
	echo "Apache skipped."
}

SQL(){
	if [[$HasSQL]]; then 
		printf "\033[1;31mSecuring SQL...\033[0m\n"
		ufw allow mysql
		mysql_secure_installation	
	
		chown -R root:root /etc/mysql/
		chmod 0644 /etc/mysql/my.cnf
		
		#Disables LOCAL INFILE
		sed -i '/^local-infile/ c\local-infile=0\' /etc/mysql/my.cnf
		
		#Lowers database privileges
		sed -i '/^[mysqld]/ c\[mysqld]\nskip-show-database\' /etc/mysql/my.cnf
		
		# Disable remote access
		sed -i '/bind-address/ c\bind-address = 127.0.0.1' /etc/mysql/my.cnf
		service mysql restart

		printf "\033[1;31mFinished!\033[0m\n"	
		clear
	fi
	
	echo "SQL skipped."
}

Samba() {
	if [[$HasSamba]]; then
		printf "\033[1;31mSecuring Samba...\033[0m\n"
		
	    ufw allow samba
		
		sed -i '82 i\restrict anonymous = 2' /etc/samba/smb.conf
		
		chattr -i /etc/samba/smb.conf

		chmod 770 /etc/samba/smb.conf
		chmod 777 /etc/samba/smb.conf

		sudo cp -TRv samba_mod.conf /etc/samba/smb.conf

		sudo service samba restart
		printf "\033[1;31mFinished!\033[0m\n"
		clear  
	fi
	
	echo "Samba skipped."
}

PHP() {
	if [[$HasPHP]]; then
	
		printf "\033[1;31mSecuring PHP...\033[0m\n"
	
		ufw allow php

		sed -i 's/expose_php/expose_php=Off' /etc/php5/apache2/php.ini
		sed -i 's/allow_url_fopen/allow_url_fopen=Off' /etc/php5/apache2/php.ini
		sed -i 's/allow_url_include/allow_url_include=Off' /etc/php5/apache2/php.ini
		sed -i 's/disable_functions=/disable_functions=exec,shell_exec,passthru,system,popen,curl_exec,curl_multi_exec,parse_ini_file,show_source,proc_open,pcntl_exec' /etc/php5/apache2/php.ini
		sed -i 's/upload_max_filesize/upload_max_filesize = 2M' /etc/php5/apache2/php.ini
		sed -i 's/max_execution_time/max_execution_time = 30' /etc/php5/apache2/php.ini
		sed -i 's/max_input_time/max_input_time = 60' /etc/php5/apache2/php.ini
		
		#Enables safe mode in php.ini
		sed -i '/^sql.safe_mode = Off/ c\safe_mode=On\nsafe_mode_gid=on\nsql.safe_mode=on' /etc/php5/apache2/php.ini
		
		#Disables Global variables
		echo "register_globals=off" >> /etc/php5/apache2/php.ini
		
		#Disables tracking, HTML, and display errors
		sed -i '/^track_errors = On/ c\track_errors = Off' /etc/php5/apache2/php.ini
		sed -i '/^html_errors = On/ c\html_errors = Off' /etc/php5/apache2/php.ini
		sed -i '/^display_errors = On/ c\display_errors = Off' /etc/php5/apache2/php.ini
		
		#Disables Remote File Includes
		sed -i '/^allow_url_fopen = On/ c\allow_url_fopen = Off' /etc/php5/apache2/php.ini
		sed -i '/^allow_url_include = On/ c\allow_url_include = Off' /etc/php5/apache2/php.ini
		
		#Restrict File Uploads
		sed -i '/^file_uploads = On/ c\file_uploads = Off' /etc/php5/apache2/php.ini
		
		#Control POST size
		sed -i '/^post_max_size = 8M/ c\post_max_size = 1K' /etc/php5/apache2/php.ini
		
		#Protect sessions
		sed -i '/^session.cookie_httponly =/ c\session.cookie_httponly = 1' /etc/php5/apache2/php.ini
		
		#Disables a metric fuck ton of functionality
		echo "disable_functions = php_uname, getmyuid, getmypid, passthru, leak, listen, diskfreespace, tmpfile, link, ignore_user_abord, 
		shell_exec, dl, set_time_limit, exec, system, highlight_file, source, show_source, fpaththru, virtual, posix_ctermid, posix_getcwd, 
		posix_getegid, posix_geteuid, posix_getgid, posix_getgrgid, posix_getgrnam, posix_getgroups, posix_getlogin, posix_getpgid, 
		posix_getpgrp, posix_getpid, posix, _getppid, posix_getpwnam, posix_getpwuid, posix_getrlimit, posix_getsid, posix_getuid, posix_isatty, 
		posix_kill, posix_mkfifo, posix_setegid, posix_seteuid, posix_setgid, posix_setpgid, posix_setsid, posix_setuid, posix_times, posix_ttyname, 
		posix_uname, proc_open, proc_close, proc_get_status, proc_nice, proc_terminate, phpinfo" >> /etc/php5/apache2/php.ini
		
		printf "\033[1;31mFinished!\033[0m\n"
		clear
	fi 
	
	echo "PHP skipped."
}

SSH() {
	if [[$HasSSH]]; then
		printf "\033[1;31mSecuring SSH...\033[0m\n"
		ufw allow 22
		
		sed -i '/^PermitRootLogin/ c\PermitRootLogin no' /etc/ssh/sshd_config
		sed -i "s/#PermitRootLogin prohibit-password/PermitRootLogin no/g" /etc/ssh/sshd_config
		sed -i '/^Protocol/ c\Protocol 2' /etc/ssh/sshd_config
		echo "Protocol 2" >> /etc/ssh/sshd_config
		sed -i '/^LoginGraceTime/ c\LoginGraceTime 5' /etc/ssh/sshd_config
		sed -i '/^IgnoreRhosts/ c\IgnoreRhosts yes' /etc/ssh/sshd_config
		sed -i '/^HostbasedAuthentication/ c\HostbasedAuthentication no' /etc/ssh/sshd_config
		sed -i '/^RhostsRSAAuthentication/ c\RhostsRSAAuthentication no' /etc/ssh/sshd_config
		sed -i '/^RhostsAuthentication/ c\RhostsAuthentication no' /etc/ssh/sshd_config
		sed -i '/^UsePrivilegeSeparation/ c\UsePrivilegeSeparation yes' /etc/ssh/sshd_config
		sed -i '/^StrictModes/ c\StrictModes yes' /etc/ssh/sshd_config 
		sed -i '/^Banner/ c\Banner   /etc/issue' /etc/ssh/sshd_config
		sed -i '/^VerifyReverseMapping/ c\VerifyReverseMapping yes' /etc/ssh/sshd_config 
		sed -i '/^LogLevel/ c\LogLevel VERBOSE' /etc/ssh/sshd_config
		sed -i '/^AllowTcpForwarding/ c\AllowTcpForwarding no' /etc/ssh/sshd_config 
		sed -i '/^X11Forwarding/ c\X11Forwarding no' /etc/ssh/sshd_config
		sed -i '/^SyslogFacility/ c\SyslogFacility AUTH' /etc/ssh/sshd_config
		sed -i '/^PermitEmptyPasswords/ c\PermitEmptyPasswords no' /etc/ssh/sshd_config
		sed -i '/^MaxStartups/ c\MaxStartups 10' /etc/ssh/sshd_config
		sed -i '/^PermitUserEnvironment/ c\PermitUserEnvironment no' /etc/ssh/sshd_config
		sed -i '/^PrintLastLog yes/ c\PrintLastLog no' /etc/ssh/sshd_config
		sed -i "s/#MaxAuthTries 6/MaxAuthTries 3/g" /etc/ssh/sshd_config
		sed -i "s/#Banner none/Banner \/etc\/issue\.net/g" /etc/ssh/sshd_config
		echo "Welcome" >> /etc/issue.net

		service ssh restart
		printf "\033[1;31mFinished!\033[0m\n"
		
		#If you need anything else - http://bookofzeus.com/harden-ubuntu/hardening/ssh
		clear
	fi
	
	echo "SSH skipped. "
}

VSFTPD() {
	if [[$HasFTP]]]; then
		printf "\033[1;31mSecuring VSFTPD\033[0m\n"
		ufw allow 21 
		sed -i '/^anonymous_enable/ c\anonymous_enable=NO' /etc/vsftpd.conf
		sed -i '/^chroot_local_user/ c\chroot_local_user=YES' /etc/vsftpd.conf
		sed -i 's/local_enable=.*/local_enable=YES/' /etc/vsftpd.conf
		sed -i 's/#write_enable=.*/write_enable=YES/' /etc/vsftpd.conf
		
		service vsftpd restart
		printf "\033[1;31mFinished!\033[0m\n"
		clear
	fi
	
	echo "VSFTPD skipped."
  
#FTP local users must log in as anonymous - 3 pts
#FTP anonymous write commands are disabled - 3pts
#FTP PASV security checks enabled - 3 pts
#FTP anonymous user is not root - 3pts 
#Insecure permissions on FTP root directory fixed - 3pts
}

File(){
	printf "\033[1;31mSetting file permissions...\033[0m\n"
	#--------- Manual File Inspection ----------------
	#/etc/rc.local should be empty except for 'exit 0'
	echo 'exit 0' > /etc/rc.local
	
	chmod 0600 /etc/securetty
	chmod 644 /etc/crontab
	chmod 640 /etc/ftpusers
	chmod 440 /etc/inetd.conf
	chmod 440 /etc/xinetd.conf
	chmod 400 /etc/inetd.d
	chmod 644 /etc/hosts.allow
	chmod 440 /etc/sudoers
	chmod 640 /etc/shadow
	chmod 600 /boot/grub/grub.cfg
	chmod 600 /etc/ssh/sshd_config
	chmod 600 /etc/gshadow-
	chmod 600 /etc/group-
	chmod 600 /etc/passwd-
	chown root:root /etc/ssh/sshd_config
	chown root:root /etc/passwd-
	chown root:root /etc/group-
	chown root:root /etc/shadow
	chown root:root /etc/securetty

	printf "\033[1;31mFinished!\033[0m\n"
	clear
}

Misc(){ 
	printf "\033[1;31mSome miscellaneous stuff...\033[0m\n"
	#--------- Manual Network Inspection and miscellanous ----------------

	#Applying apparmor to Firefox
	aa-enforce /etc/apparmor.d/usr.bin.Firefox
	
	#IP Spoofing
	echo "order bind,hosts" >> /etc/host.conf
	echo "nospoof on" >> /etc/host.conf
	
	#Prevent IP forwarding 
	echo 0 > /proc/sys/net/ipv4/ip_forward
	
	#Sets Firefox as default browser
	sed -i 's/x-scheme-handler\/http=.*/x-scheme-handler\/http=firefox.desktop/g' /home/$UserName/.local/share/applications/mimeapps.list
	
	#Changes the nameserver to 8.8.8.8, Google's DNS.
	sed -i '/^nameserver/ c\nameserver 8.8.8.8' /etc/resolv.conf
	
	#Adds banners, I think? It was like fucking 4AM when I wrote this I have no idea
	echo "" >> Warnings.txt
	
	chown root:root /etc/motd
	chmod 644 /etc/motd
	echo "Authorized uses only. All activity may be monitored and reported." > /etc/motd
	
	chown root:root /etc/issue
	chmod 644 /etc/issue
	echo "Authorized uses only. All activity may be monitored and reported." > /etc/issue
  
	chown root:root /etc/issue.net
	chmod 644 /etc/issue.net
	echo "Authorized uses only. All activity may be monitored and reported." > /etc/issue.net
	
	printf "\033[1;31mFinished!\033[0m\n"
	clear
}

Netcat() {
	printf "\033[1;31mScanning for Netcat\033[0m\n"
	
	#Determines if there are any netcat backdoors running, and will delete some of them
	echo "netcat backdoors:" >> Warnings.txt
	netstat -ntlup | grep -e "netcat" -e "nc" -e "ncat" >> Warnings.txt

	#Goes and grabs the PID of the first process that has the name netcat. Kills the executable, doesn’t go and kill the item in one of the crons. Will go through until it has removed all netcats.
	a=0;
	for i in $(netstat -ntlup | grep -e "netcat" -e "nc" -e "ncat"); do
	if [[ $(echo $i | grep -c -e "/") -ne 0  ]]; then
		badPID=$(ps -ef | pgrep $( echo $i  | cut -f2 -d'/'));
		realPath=$(ls -la /proc/$badPID/exe | cut -f2 -d'>' | cut -f2 -d' ');
		cp $realPath $a
		echo "$realPath $a" >> Warnings.txt;
		a=$((a+1));
		rm $realPath;
		kill $badPID;
	fi
	done
	printf "\033[1;31mFinished!\033[0m\n"
	clear

}

Firewall(){
	printf "\033[1;31mSetting up firewall...\033[0m\n"
	#--------- Setup Firewall ----------------
	# Flush/Delete firewall rules
	iptables -F
	iptables -X
	iptables -Z
	
	ufw enable
	ufw logging full
	
	#Disables IPV6
	sed -i '/^IPV6=yes/ c\IPV6=no\' /etc/default/ufw

	# ?lock null packets (DoS)
	iptables -A INPUT -p tcp --tcp-flags ALL NONE -j DROP

	# Block syn-flood attacks (DoS)
	iptables -A INPUT -p tcp ! --syn -m state --state NEW -j DROP

	# Block XMAS packets (DoS)
	iptables -A INPUT -p tcp --tcp-flags ALL ALL -j DROP

	# Allow internal traffic on the loopback device
	iptables -A INPUT -i lo -j ACCEPT

	# Allow ssh access
	iptables -A INPUT -p tcp -m tcp --dport 22 -j ACCEPT
	
	# Allow established connections
	iptables -I INPUT -m state --state ESTABLISHED,RELATED -j ACCEPT
  
	# Allow outgoing connections
	iptables -P OUTPUT ACCEPT
  
	# Set default deny firewall policy
	iptables -P INPUT DROP

	# Save rules
	iptables-save > /etc/iptables/rules.v4	
	
	#If you ever need to block an IP address - http://bookofzeus.com/harden-ubuntu/hardening/protect-ddos-attacks/
	printf "\033[1;31mFinished!\033[0m\n"
	clear
}

Sysctl(){
	printf "\033[1;31mMaking Sysctl Secure...\033[0m\n"
	#--------- Secure /etc/sysctl.conf ----------------
	echo "
net.ipv4.tcp_syncookies=1
net.ipv4.tcp_max_syn_backlog=2048
net.ipv4.tcp_synack_retries=2
net.ipv4.tcp_syn_retries=5
net.ipv4.ip_forward=0
net.ipv4.conf.all.send_redirects=0
net.ipv4.conf.default.send_redirects=0
net.ipv4.conf.all.accept_redirects=0
net.ipv4.conf.default.accept_redirects=0
net.ipv4.conf.all.secure_redirects=0
net.ipv4.conf.default.secure_redirects=0 
net.ipv4.conf.all.rp_filter=1
net.ipv4.conf.default.rp_filter=1
net.ipv4.icmp_echo_ignore_broadcasts=1
net.ipv4.conf.all.accept_source_route=0
net.ipv6.conf.all.accept_source_route=0
net.ipv4.conf.default.accept_source_route=0
net.ipv6.conf.default.accept_source_route=0
net.ipv4.conf.all.send_redirects=0
net.ipv4.conf.default.send_redirects=0
net.ipv4.conf.all.log_martians=1
net.ipv4.icmp_ignore_bogus_error_responses=1
net.ipv6.conf.default.accept_redirects=0
net.ipv6.conf.all.accept_redirects=0
net.ipv4.conf.default.accept_redirects=0
net.ipv4.icmp_echo_ignore_all=1
kernel.exec-shield=1
kernel.randomize_va_space=1
net.ipv6.conf.default.router_solicitations=0
net.ipv6.conf.default.accept_ra_rtr_pref=0
net.ipv6.conf.default.accept_ra_pinfo=0
net.ipv6.conf.default.accept_ra_defrtr=0
net.ipv6.conf.default.autoconf=0
net.ipv6.conf.default.dad_transmits=0
net.ipv6.conf.default.max_addresses=1
	" >> /etc/sysctl.conf
	
	printf "\033[1;31mFinished!\033[0m\n"
	clear
}

Main
